#카테고리
#vtitle
}
for (index in 1:20) { #1번째부터 20번째까지
#제목
node <- html_node(news, paste0("body > div.container-doc > main > section > div > div.content-article > div.box_g.box_news_issue > ul > li:nth-child(",index,") > div > div > strong > a"))
title <- html_text(node)
title
#vtitle[index] <- title
#카테고리
#vtitle
}
for (index in 1:20) { #1번째부터 20번째까지
#제목
node <- html_node(news, paste0("body > div.container-doc > main > section > div > div.content-article > div.box_g.box_news_issue > ul > li:nth-child(",index,") > div > div > strong > a"))
title <- html_text(node)
title
#vtitle[index] <- title
#카테고리
#vtitle
}
for (index in 1:20) { #1번째부터 20번째까지
#제목
node <- html_node(news, paste0("body > div.container-doc > main > section > div > div.content-article > div.box_g.box_news_issue > ul > li:nth-child(",index,") > div > div > strong > a"))
title <- html_text(node)
title
#vtitle[index] <- title
#카테고리
#vtitle
}
vtitle<-NULL;
for (index in 1:20) { #1번째부터 20번째까지
#제목
node <- html_node(news, paste0("body > div.container-doc > main > section > div > div.content-article > div.box_g.box_news_issue > ul > li:nth-child(",index,") > div > div > strong > a"))
title <- html_text(node)
title
vtitle[index] <- title
#카테고리
vtitle
}
library(rvest)
news <- read_html("https://news.daum.net/")
vtitle<-NULL;
for (index in 1:20) { #1번째부터 20번째까지
#제목
node <- html_node(news, paste0("body > div.container-doc > main > section > div > div.content-article > div.box_g.box_news_issue > ul > li:nth-child(",index,") > div > div > strong > a"))
title <- html_text(node, trim=TRUE)
title
vtitle[index] <- title
#카테고리
vtitle
}
library(rvest)
news <- read_html("https://news.daum.net/")
vtitle<-NULL; vcategory<-NULL;
for (index in 1:20) { #1번째부터 20번째까지
#제목
node_t <- html_node(news, paste0("body > div.container-doc > main > section > div > div.content-article > div.box_g.box_news_issue > ul > li:nth-child(",index,") > div > div > strong > a"))
title <- html_text(node_t, trim=TRUE)
title
vtitle[index] <- title
#카테고리
node_c <- html_node(news, paste0("body > div.container-doc > main > section > div > div.content-article > div.box_g.box_news_issue > ul > li:nth-child(",index,") > div > div > span > span.txt_category"))
category <- html_text(node_c, trim=TRUE)
vcategory[index] <- category
}
page <- data.frame(vtitle, vcategory)
View(page)
write.csv(page, "output/movie_reviews_1page.csv") #미리 생성되어있던 폴더에 새로 파일을 생성함.
library(rvest)
webtoon <- read_html("https://comic.naver.com/genre/bestChallenge.nhn") #실행할때마다 실시간으로 바뀜
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
#만화 제목
node_name <- html_node(webtoon, "#content div.challengeInfo > h6.challengeTitle > a")
comicName <- html_text(node_name, trim=TRUE)
comicName
library(rvest)
webtoon <- read_html("https://comic.naver.com/genre/bestChallenge.nhn") #실행할때마다 실시간으로 바뀜
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
#만화 제목
node_name <- html_nodes(webtoon, "#content div.challengeInfo > h6.challengeTitle > a")
comicName <- html_text(node_name, trim=TRUE)
comicName
#만화 요약
node_summary <- html_nodes(webtoon, "#content div.challengeInfo > div.summary")
comicSummary <- html_text(node_summary, trim=TRUE)
comicSummary
#만화 평점
node_grade <- html_nodes(webtoon, "#content div.challengeInfo > div.summary")
comicGrade <- html_text(node_grade, trim=TRUE)
comicGrade
library(rvest)
webtoon <- read_html("https://comic.naver.com/genre/bestChallenge.nhn") #실행할때마다 실시간으로 바뀜
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
#만화 제목
# #content div.challengeInfo > h6.challengeTitle > a
#만화 요약
# #content div.challengeInfo > div.summary
#만화 평점
# #content div.challengeInfo > div.rating_type > strong
#만화 제목
node_name <- html_nodes(webtoon, "#content div.challengeInfo > h6.challengeTitle > a")
comicName <- html_text(node_name, trim=TRUE)
comicName
#만화 요약
node_summary <- html_nodes(webtoon, "#content div.challengeInfo > div.summary")
comicSummary <- html_text(node_summary, trim=TRUE)
comicSummary
#만화 평점
node_grade <- html_nodes(webtoon, "#content div.challengeInfo > div.rating_type > strong")
comicGrade <- html_text(node_grade, trim=TRUE)
comicGrade
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url)
#만화 제목
node_name <- html_nodes(webtoon, "#content div.challengeInfo > h6.challengeTitle > a")
name <- html_text(node_name, trim=TRUE)
comicName[i] <- name
comicName
#만화 요약
node_summary <- html_nodes(webtoon, "#content div.challengeInfo > div.summary")
summary <- html_text(node_summary, trim=TRUE)
comicSummary[i] <- summary
#만화 평점
node_grade <- html_nodes(webtoon, "#content div.challengeInfo > div.rating_type > strong")
grade <- html_text(node_grade, trim=TRUE)
comicGrade[i] <- grade
}
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url)
#만화 제목
node_name <- html_nodes(html, "#content div.challengeInfo > h6.challengeTitle > a")
name <- html_text(node_name, trim=TRUE)
comicName[i] <- name
comicName
#만화 요약
node_summary <- html_nodes(html, "#content div.challengeInfo > div.summary")
summary <- html_text(node_summary, trim=TRUE)
comicSummary[i] <- summary
#만화 평점
node_grade <- html_nodes(html, "#content div.challengeInfo > div.rating_type > strong")
grade <- html_text(node_grade, trim=TRUE)
comicGrade[i] <- grade
}
warnings()
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url)
#만화 제목
node_name <- html_nodes(html, "#content div.challengeInfo > h6.challengeTitle > a")
name <- html_text(node_name, trim=TRUE)
comicName[i] <- name
comicName
#만화 요약
node_summary <- html_nodes(html, "#content div.challengeInfo > div.summary")
summary <- html_text(node_summary, trim=TRUE)
comicSummary[i] <- summary
#만화 평점
node_grade <- html_nodes(html, "#content div.challengeInfo > div.rating_type > strong")
grade <- html_text(node_grade)
comicGrade[i] <- grade
}
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url)
#만화 제목
node_name <- html_nodes(html, "#content div.challengeInfo > h6.challengeTitle > a")
name <- html_text(node_name, trim=TRUE)
comicName[i] <- name
#만화 요약
node_summary <- html_nodes(html, "#content div.challengeInfo > div.summary")
summary <- html_text(node_summary, trim=TRUE)
comicSummary[i] <- summary
#만화 평점
node_grade <- html_nodes(html, "#content div.challengeInfo > div.rating_type > strong")
grade <- html_text(node_grade)
comicGrade[i] <- grade
}
#만화 제목
#node_name <- html_nodes(webtoon, "#content div.challengeInfo > h6.challengeTitle > a")
#comicName <- html_text(node_name, trim=TRUE)
#comicName
#만화 요약
#node_summary <- html_nodes(webtoon, "#content div.challengeInfo > div.summary")
#comicSummary <- html_text(node_summary, trim=TRUE)
#comicSummary
#만화 평점
#node_grade <- html_nodes(webtoon, "#content div.challengeInfo > div.rating_type > strong")
#comicGrade <- html_text(node_grade, trim=TRUE)
#comicGrade
comics <- data.frame(comicName, comicSummary, comicGrade)
View(comics)
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url)
#만화 제목
node_name <- html_nodes(html, "#content div.challengeInfo > h6.challengeTitle > a")
#name <- html_text(node_name, trim=TRUE)
#comicName[i] <- name
comicName <- html_text(node_name, trim=TRUE)
#만화 요약
node_summary <- html_nodes(html, "#content div.challengeInfo > div.summary")
#summary <- html_text(node_summary, trim=TRUE)
#comicSummary[i] <- summary
comicSummary <- html_text(node_summary, trim=TRUE)
#만화 평점
node_grade <- html_nodes(html, "#content div.challengeInfo > div.rating_type > strong")
#grade <- html_text(node_grade)
#comicGrade[i] <- grade
comicGrade <- html_text(node_grade)
}
#만화 제목
#node_name <- html_nodes(webtoon, "#content div.challengeInfo > h6.challengeTitle > a")
#comicName <- html_text(node_name, trim=TRUE)
#comicName
#만화 요약
#node_summary <- html_nodes(webtoon, "#content div.challengeInfo > div.summary")
#comicSummary <- html_text(node_summary, trim=TRUE)
#comicSummary
#만화 평점
#node_grade <- html_nodes(webtoon, "#content div.challengeInfo > div.rating_type > strong")
#comicGrade <- html_text(node_grade, trim=TRUE)
#comicGrade
comics <- data.frame(comicName, comicSummary, comicGrade)
View(comics)
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url)
#만화 제목
node_name <- html_nodes(html, "#content div.challengeInfo > h6.challengeTitle > a")
#name <- html_text(node_name, trim=TRUE)
#comicName[i] <- name
comicName <- html_text(node_name, trim=TRUE)
#만화 요약
node_summary <- html_nodes(html, "#content div.challengeInfo > div.summary")
#summary <- html_text(node_summary, trim=TRUE)
#comicSummary[i] <- summary
comicSummary <- html_text(node_summary, trim=TRUE)
#만화 평점
node_grade <- html_nodes(html, "#content div.challengeInfo > div.rating_type > strong")
#grade <- html_text(node_grade)
#comicGrade[i] <- grade
comicGrade <- html_text(node_grade)
}
#만화 제목
#node_name <- html_nodes(webtoon, "#content div.challengeInfo > h6.challengeTitle > a")
#comicName <- html_text(node_name, trim=TRUE)
#comicName
#만화 요약
#node_summary <- html_nodes(webtoon, "#content div.challengeInfo > div.summary")
#comicSummary <- html_text(node_summary, trim=TRUE)
#comicSummary
#만화 평점
#node_grade <- html_nodes(webtoon, "#content div.challengeInfo > div.rating_type > strong")
#comicGrade <- html_text(node_grade, trim=TRUE)
#comicGrade
comics <- data.frame(comicName, comicSummary, comicGrade)
View(comics)
site<- "http://movie.naver.com/movie/point/af/list.nhn?page="
html <- NULL
vtitle <- NULL
vpoint <- NULL
vreview <- NULL
movie.allreview <- NULL
for(i in 1: 100) {
cat(i, "페이지\n")
url <- paste0(site, i)
html <- read_html(url)
for (index in 1:10) { #리뷰글은 필수가 아니라 리뷰글이 어떤 영화에 관련된 것인지 알기 위해 for문을 돌렸다고 함.
# 영화제목
node <- html_node(html, paste0("#old_content > table > tbody > tr:nth-child(", index, ") > td.title > a.movie.color_b"))
title <- html_text(node)
vtitle[index] <- title
# 영화평점
node <- html_node(html, paste0("#old_content > table > tbody > tr:nth-child(", index,") > td.title > div > em"))
point <- html_text(node)
vpoint <- c(vpoint, point)
# 영화리뷰
node <- html_nodes(html, xpath=paste0('//*[@id="old_content"]/table/tbody/tr[', index,"]/td[2]/text()"))
node <- html_text(node, trim=TRUE)
review = node[4]
vreview <- append(vreview, review)
}
}
movie.allreview <- data.frame(vtitle, vpoint, vreview)
View(movie.allreview)
write.csv(movie.allreview, "output/movie_reviews_100page.csv") #csv파일은 엑셀에서 열면 엑셀은 utf-8을 지원하지 않아서 메모장에서 열어야 함. 만약 ,fileEncoding='CP949'를 붙여주면 엑셀로 열 수 있음. 다만 그러면 R에서 파일을 읽을 때도 CP949로 읽도록 해야함.
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url)
#만화 제목
node_name <- html_nodes(html, "#content div.challengeInfo > h6.challengeTitle > a")
#name <- html_text(node_name, trim=TRUE)
#comicName[i] <- name
comicName <- html_text(node_name, trim=TRUE)
#만화 요약
node_summary <- html_nodes(html, "#content div.challengeInfo > div.summary")
#summary <- html_text(node_summary, trim=TRUE)
#comicSummary[i] <- summary
comicSummary <- html_text(node_summary, trim=TRUE)
#만화 평점
node_grade <- html_nodes(html, "#content div.challengeInfo > div.rating_type > strong")
#grade <- html_text(node_grade)
#comicGrade[i] <- grade
comicGrade <- html_text(node_grade)
comics <- data.frame(comicName, comicSummary, comicGrade)
}
View(comics)
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url)
#만화 제목
node_name <- html_nodes(html, "#content div.challengeInfo > h6.challengeTitle > a")
#name <- html_text(node_name, trim=TRUE)
#comicName[i] <- name
comicName <- html_text(node_name, trim=TRUE)
#만화 요약
node_summary <- html_nodes(html, "#content div.challengeInfo > div.summary")
#summary <- html_text(node_summary, trim=TRUE)
#comicSummary[i] <- summary
comicSummary <- html_text(node_summary, trim=TRUE)
#만화 평점
node_grade <- html_nodes(html, "#content div.challengeInfo > div.rating_type > strong")
#grade <- html_text(node_grade)
#comicGrade[i] <- grade
comicGrade <- html_text(node_grade)
comics <- data.frame(comicName, comicSummary, comicGrade)
}
View(comics)
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
comics <- NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url)
#만화 제목
node_name <- html_nodes(html, "#content div.challengeInfo > h6.challengeTitle > a")
#name <- html_text(node_name, trim=TRUE)
#comicName[i] <- name
comicName <- html_text(node_name, trim=TRUE)
#만화 요약
node_summary <- html_nodes(html, "#content div.challengeInfo > div.summary")
#summary <- html_text(node_summary, trim=TRUE)
#comicSummary[i] <- summary
comicSummary <- html_text(node_summary, trim=TRUE)
#만화 평점
node_grade <- html_nodes(html, "#content div.challengeInfo > div.rating_type > strong")
#grade <- html_text(node_grade)
#comicGrade[i] <- grade
comicGrade <- html_text(node_grade)
}
comics <- data.frame(comicName, comicSummary, comicGrade)
View(comics)
site<- "http://movie.naver.com/movie/point/af/list.nhn?page="
html <- NULL
movie.review <- NULL
for(i in 1: 100) {
url <- paste0(site, i)
html <- read_html(url)
nodes <- html_nodes(html, ".movie")
title <- html_text(nodes)
nodes <- html_nodes(html, ".title em")
point <- html_text(nodes)
nodes <- html_nodes(html, xpath="//*[@id='old_content']/table/tbody/tr/td[2]/text()")
imsi <- html_text(nodes, trim=TRUE)
review <- imsi[nchar(imsi) > 0]
if(length(review) == 10) {
page <- data.frame(title, point, review)
movie.review <- rbind(movie.review, page)
} else {
cat(paste(i," 페이지에는 리뷰글이 생략된 데이터가 있어서 수집하지 않습니다.ㅜㅜ\n"))
}
}
View(movie.review)
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
comic <- NULL
comics <- NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url)
#만화 제목
node_name <- html_nodes(html, "#content div.challengeInfo > h6.challengeTitle > a")
#name <- html_text(node_name, trim=TRUE)
#comicName[i] <- name
comicName <- html_text(node_name, trim=TRUE)
#만화 요약
node_summary <- html_nodes(html, "#content div.challengeInfo > div.summary")
#summary <- html_text(node_summary, trim=TRUE)
#comicSummary[i] <- summary
comicSummary <- html_text(node_summary, trim=TRUE)
#만화 평점
node_grade <- html_nodes(html, "#content div.challengeInfo > div.rating_type > strong")
#grade <- html_text(node_grade)
#comicGrade[i] <- grade
comicGrade <- html_text(node_grade)
#exam5.R 예제6 코드
comic <- data.frame(comicName, comicSummary, comicGrade)
comics <- rbind(comics, comic)
}
View(comics)
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
comic <- NULL
comics <- NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url) #실행할때마다 바뀜
#만화 제목
node_name <- html_nodes(html, "#content div.challengeInfo > h6.challengeTitle > a")
comicName <- html_text(node_name, trim=TRUE)
#만화 요약
node_summary <- html_nodes(html, "#content div.challengeInfo > div.summary")
comicSummary <- html_text(node_summary, trim=TRUE)
#만화 평점
node_grade <- html_nodes(html, "#content div.challengeInfo > div.rating_type > strong")
comicGrade <- html_text(node_grade)
#exam5.R 예제6 코드 참고함
comic <- data.frame(comicName, comicSummary, comicGrade)
comics <- rbind(comics, comic)
}
View(comics)
#예제7 참고함
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
comic <- NULL
comics <- NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url) #실행할때마다 바뀜
#만화 제목
node_name <- html_nodes(html, "#content div.challengeInfo > h6.challengeTitle > a")
comicName <- html_text(node_name, trim=TRUE)
#만화 요약
node_summary <- html_nodes(html, "#content div.challengeInfo > div.summary")
comicSummary <- html_text(node_summary, trim=TRUE)
#만화 평점
node_grade <- html_nodes(html, "#content div.challengeInfo > div.rating_type > strong")
comicGrade <- html_text(node_grade)
#exam5.R 예제6 코드 참고함
comic <- data.frame(comicName, comicSummary, comicGrade)
comics <- rbind(comics, comic)
}
View(comics)
#정적크롤링수행평가-서대훈
library(rvest)
#예제7 참고함
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
comic <- NULL
comics <- NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url) #실행할때마다 바뀜
#만화 제목
node_name <- html_nodes(html, "#content div.challengeInfo > h6.challengeTitle > a")
comicName <- html_text(node_name, trim=TRUE)
#만화 요약
node_summary <- html_nodes(html, "#content div.challengeInfo > div.summary")
comicSummary <- html_text(node_summary, trim=TRUE)
#만화 평점
node_grade <- html_nodes(html, "#content div.challengeInfo > div.rating_type > strong")
comicGrade <- html_text(node_grade)
#exam5.R 예제6 코드 참고함
comic <- data.frame(comicName, comicSummary, comicGrade)
comics <- rbind(comics, comic)
}
View(comics)
write.csv(comics, "output/webtoons_20page.csv")
#정적크롤링수행평가-서대훈
library(rvest)
#예제7 참고함
webtoon<- "https://comic.naver.com/genre/bestChallenge?&page="
comicName<-NULL; comicSummary<-NULL; comicGrade<-NULL
comic <- NULL
comics <- NULL
for(i in 1: 20) {
url <- paste0(webtoon, i)
html <- read_html(url) #실행할때마다 바뀜
#만화 제목
node_name <- html_nodes(html, "#content div.challengeInfo > h6.challengeTitle > a")
comicName <- html_text(node_name, trim=TRUE)
#만화 요약
node_summary <- html_nodes(html, "#content div.challengeInfo > div.summary")
comicSummary <- html_text(node_summary, trim=TRUE)
#만화 평점
node_grade <- html_nodes(html, "#content div.challengeInfo > div.rating_type > strong")
comicGrade <- html_text(node_grade)
#exam5.R 예제6 코드 참고함
comic <- data.frame(comicName, comicSummary, comicGrade)
comics <- rbind(comics, comic)
}
View(comics)
write.csv(comics, "output/navercomic.csv")
