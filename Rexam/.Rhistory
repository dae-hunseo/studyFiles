ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(linewidth=2, aes(group=company,colour=company), linetype = 3) #3이면 dotted
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(linewidth=2, aes(group=company,colour=company), linetype = "dotdash") #숫자 대신 실제 값으로 줘도 된다.
# 선의 종류 :  0 = blank, 1 = solid, 2 = dashed, 3 = dotted, 4 = dotdash, 5 = longdash, 6 = twodash
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(linewidth=2, aes(group=company,colour=company), linetype = 3) #3이면 dotted
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(linewidth=2, aes(group=company,colour=company), linetype = "dotdash") #숫자 대신 실제 값으로 줘도 된다.
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6) #만약 로드를 안 했다면 Cars93마다 MASS를 붙여야 한다.
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, colour="blue")
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6) #만약 로드를 안 했다면 Cars93마다 MASS를 붙여야 한다.
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, colour="blue")
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6)
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, fill="blue")
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Price)) + geom_point(colour="grey", shape=21, size=6) # aes(x=Weight, y=MPG.highway, fill=Price)은 가격에 따라 색상을 다르게 채우겠다는 의미. 그런데 price가 numeric형이라 채도만 다르게 된다.
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(colour="grey", shape=21, size=6, aes(fill=Price))
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +  geom_point(colour="grey", shape=21, size=6)
Cars93$Cylinders
class(Cars93$Cylinders)
class(Cars93$Price)
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +
geom_point(colour="grey", shape=21, size=6) +
scale_fill_brewer(palette="Oranges") # Oranges
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +
geom_point(colour="grey", shape=21, size=6) +
scale_fill_brewer(palette="Reds") # Reds
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +
geom_point(colour="grey", shape=21, size=6) +
scale_fill_brewer(palette="Oranges") # Oranges
ggplot(data=w, aes(x=year)) + geom_bar() #geom_bar()는 빈도막대 그래프인데 년도별로 데이터가 여러개 있는게 아니라 각 년도마다 모든 데이터가 하나라 다 100%로 나온다.(의미없는 그래프)
w <- data.frame(year=c("2014", "2015", "2016", "2017", "2018"),
weight=c(65,66,64,68,72))
ggplot(data=w, aes(x=year)) + geom_bar() #geom_bar()는 빈도막대 그래프인데 년도별로 데이터가 여러개 있는게 아니라 각 년도마다 모든 데이터가 하나라 다 100%로 나온다.(의미없는 그래프)
ggplot(data=w, aes(x=year, y=weight)) + geom_bar() # 갯수를 세서 막대를 그리는게 기본이라.. 에러난다!!
# 범례 없애기
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+
geom_point()+guides(color=F) #color에 F를 주면 범례를 나타내지 않는다.
# 범례 없애기
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+
geom_point()+guides(color=None) #color에 F를 주면 범례를 나타내지 않는다.
# 범례 없애기
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+
geom_point()+guides(color=none) #color에 F를 주면 범례를 나타내지 않는다.
w <- data.frame(year=c("2014", "2015", "2016", "2017", "2018"),
weight=c(65,66,64,68,72))
# 범례 열 갯수 설정
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+
geom_point()+ scale_color_brewer(palette="Reds")+ guides(color = guide_legend(ncol = 2))  #범례를 2개 열로 나눠서 표현한다.
# 범례 없애기
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+
geom_point()+guides(color="none") #color에 'none'를 주면 범례를 나타내지 않는다.
x
p1 <- ggplot(data = iris, aes(x = Petal.Width, y= Petal.Length, col=Species)) + geom_point()
p1
iris
library(gridExtra)
grid.arrange(p1, p2, nrow = 2)
grid.arrange(p1, p2, nrow = 2)
grid.arrange(p1, p2, ncol = 2)
p1 <- ggplot(data = iris, aes(x = Petal.Width, y= Petal.Length, col=Species)) + geom_point() #iris는 R의 내장 데이터셋
p2 <- ggplot(data = iris, aes(x = Sepal.Width, y= Sepal.Length, col=Species)) + geom_point()
grid.arrange(p1, p2, p1, p2, nrow = 2) #p1과 p2가 갖고있는 그래프를 2번씩 내보낸다. nrow=2를 주면 2행2열이 된다. 즉 여러개의 그래프를 2행2열로 레이아웃을 나눠서 그래프를 그린다.
grid.arrange(p1, p2, nrow = 2)
grid.arrange(p1, p2, ncol = 2)
library(plotly)
# ggplot으로 그래프 만들기
p <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
p
# 인터랙티브 그래프 만들기
ggplotly(p)
mpg
p
str(mpg)
clarity
diamonds
sales_df <- read.xlsx("data/data.xlsx", 2, encoding="UTF-8")
# 트리맵 그리기
# index에 표현하고 싶은 계층 순서대로 벡터로 생성. product, region 순으로 벡터를 지정함으로써
# product가 region보다 더 상위로 구분이 됨
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황", fontfamily.title="maple", fontfamily.labels="maple") #maple은 폰트이름이다.
# 트리맵 메모리 로드
library(treemap)
sales_df <- read.xlsx("data/data.xlsx", 2, encoding="UTF-8") #엑셀파일의 sheet2
# 트리맵 그리기
# index에 표현하고 싶은 계층 순서대로 벡터로 생성. product, region 순으로 벡터를 지정함으로써
# product가 region보다 더 상위로 구분이 됨
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황", fontfamily.title="maple", fontfamily.labels="maple") #maple은 폰트이름이다.
# 트리맵 그리기
treemap(sales_df, vSize="saleAmt", index=c("region", "product"), title="A기업 판매현황", fontfamily.title="dog", fontfamily.labels="dog")
dev.copy(png, "output/test.png")
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황", fontfamily.title="maple", fontfamily.labels="maple")
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황", fontfamily.title="maple", fontfamily.labels="maple")
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황", fontfamily.title="maple", fontfamily.labels="maple")
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황", fontfamily.title="maple", fontfamily.labels="maple")
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황", fontfamily.title="maple", fontfamily.labels="maple")
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황", fontfamily.title="maple", fontfamily.labels="maple")
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황", fontfamily.title="maple", fontfamily.labels="maple")
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황", fontfamily.title="maple", fontfamily.labels="maple")
#11월 14일 실습1
#exam11.R 관련 내용
#[문제1]
#score.csv 를 읽고 student 라는 데이터프레임을 생성한다. class 컬럼의 값을 팩터형으로 변환한다.
#class 컬럼의 값별로 칼라를 지정하여 수학 점수와 과학 점수에 대한 산점도를 그린다.
student <- read.csv("data/score.csv")
student
ggplot(mpg,aes(displ, hwy))  #x 축은 displ, y축은 hwy #Grid는 기본적으로 설정됨.
ggplot(mpg,aes(displ, hwy)) + geom_point() #데이터들에 점을 찍는다.
ggplot(student,aes(math, science)) + geom_point()
sketch <- ggplot(data = mpg, aes(x = displ, y = hwy)) #x 축은 displ, y축은 hwy라는 데이터계층을 미리 호출을 해서 밑바탕이 되는 데이터레이어만 그려지는데 이렇게 변수에 담는 경우는 화면(Plots)에 보이지 않는다.(뭔소린지 이해가..)
str(sketch)
sketch + geom_point() #데이터가 점으로 표시된다.
sketch + geom_line(color="green") #데이터를 점이 아닌 초록선 선으로 이어서 보여준다.
sketch + geom_point() + xlim(3, 6) #x축 범위를 지정해서 범위 밖의 데이터는 잘라낸다.
sketch + geom_point() + ylim(10, 30) #y축 범위를 지정해서 범위 밖의 데이터는 잘라낸다.
sketch + geom_point() + xlim(3, 6) + ylim(10, 30)
sketch + geom_point(size=3) + coord_cartesian(xlim=c(3, 6), ylim=c(10, 30)) #x축과 y축의 범위는 '+' 연산자로 주던가 coord_cartesian()이라는 함수의 argument로 x축과 y축의 범위를 주는 것도 가능하다.
sketch + geom_point(aes(color=drv)) #sketch라는 변수 안에는 리스트 객체가 들어있는데 aes() ~~~
ggplot(student,aes(math, science, color=class)) + geom_point()
ggplot(student,aes(math, science, color=factor(class))) + geom_point()
ggplot(student,aes(math, science, color=as.factor(class))) + geom_point()
summary(factor(mtcars$cyl)) #mtcars$cyl가 숫자이지만 factor()를 이용해서 범주형으로 바꾼다. 이 때는 as.factor하나 factor하나 결과는 같다고 한다.
summary(mtcars$cyl) #summary함수는 numeric 함수면 최솟값, 1분위, 중간, 평균, 3분위, 최댓값을 출력한다.
summary(factor(mtcars$cyl)) #mtcars$cyl가 숫자이지만 factor()를 이용해서 범주형으로 바꾼다. 이 때는 as.factor하나 factor하나 결과는 같다고 한다.
ggplot(mtcars, aes(x=cyl)) + geom_bar() #geom_bar는 카운트해서 바 그래프 그려주는 거다. #x축값이 3초과5미만으로 표현된 첫번째 그래프는 실린더 4개짜리인 것 같다.
ggplot(mtcars, aes(x=cyl)) + geom_bar(width=0.5) #width는 너비값인가?
ggplot(mtcars, aes(x=cyl, fill=factor(gear))) + geom_bar(alpha=0.5) #fill=factor(gear)은 gear 데이터값으로 채우는데 그 값을 numeric으로 인식하지말고 factor로 인식하라는 것이다.
ggplot(mtcars, aes(x=cyl)) + geom_bar(aes(fill=factor(gear)), alpha=1.0) #alpha는 투명도를 의미한다. 0.0은 완전투명, 1.0은 완전 불투명 #fill=factor(gear)를 geom_bar의 매개변수로 줬다.
ggplot(airquality, aes(x=Day, y=Temp, col=factor(Month))) + geom_point(size=2) #다만 이렇게 색상을 다르게 적용할때는 aes()에 넣어줘야 한다. #만약 factor(Month)가 아닌 그냥 col=Month를 하면 다양한 유채색이 아닌 진한 색상과 흐린 색상으로 데이터를 구분한다. #연속적인 수치데이터를 가지고 색상으로 구분하겠다면 factor(Month)처럼 해줘야 한다. 그럼 개별적인 수치 데이터라는 뜻으로 완전 다른 색상으로 데이터 종류를 구분한다. #geom_point로 점의 크기를 2로 지정한다.
factor
ggplot(mtcars, aes(x=cyl, fill=factor(gear))) + geom_bar(alpha=0.5) #fill=factor(gear)은 gear 데이터값으로 채우는데 그 값을 numeric으로 인식하지말고 factor로 인식하라는 것이다.
ggplot(student,aes(math, science, color=as.factor(class))) + geom_point()
#11월 14일 실습1
#exam11.R 관련 내용
#[문제1]
#score.csv 를 읽고 student 라는 데이터프레임을 생성한다. class 컬럼의 값을 팩터형으로 변환한다.
#class 컬럼의 값별로 칼라를 지정하여 수학 점수와 과학 점수에 대한 산점도를 그린다.
student <- read.csv("data/score.csv")
student$class <- as.factor(student$class)
class(student$class)
class(student)
str(student)
ggplot(student,aes(math, science, color=class)) + geom_point()
ggplot(student,aes(math, science)) + geom_point() #x축과 y축을 지정하고 범례를 정한다음
str(student)
student
#11월 14일 실습1
#exam11.R 관련 내용
#[문제1]
#score.csv 를 읽고 student 라는 데이터프레임을 생성한다. class 컬럼의 값을 팩터형으로 변환한다.
#class 컬럼의 값별로 칼라를 지정하여 수학 점수와 과학 점수에 대한 산점도를 그린다.
student <- read.csv("data/score.csv")
student$class <- as.factor(student$class) #팩터형으로 변환
str(student)
ggplot(student,aes(math, science, color=class)) + geom_point() #x축과 y축을 지정하고 범례를 정한다음 각 데이터의 class에 따라 색상이 달리 나오게 지정 #geom_point()는 그래프에 나오는 모든 데이터를 점으로 표현
ggplot(student,aes(math, science, color=class)) + geom_point() #x축과 y축을 지정하고 범례를 정한다음 각 데이터의 class에 따라 색상이 달리 나오게 지정 #geom_point()는 그래프에 나오는 모든 데이터를 점으로 표현
library(ggplot2)
library(treemap)
#[문제1]
#score.csv 를 읽고 student 라는 데이터프레임을 생성한다. class 컬럼의 값을 팩터형으로 변환한다.
#class 컬럼의 값별로 칼라를 지정하여 수학 점수와 과학 점수에 대한 산점도를 그린다.
student <- read.csv("data/score.csv")
student$class <- as.factor(student$class) #팩터형으로 변환
str(student)
ggplot(student,aes(math, science, color=class)) + geom_point() #x축과 y축을 지정하고 범례를 정한다음 각 데이터의 class에 따라 색상이 달리 나오게 지정 #geom_point()는 그래프에 나오는 모든 데이터를 점으로 표현
ggplot(student,aes(math, science, color=class)) + geom_point() + theme(text = element_text(size=15))#x축과 y축을 지정하고 범례를 정한다음 각 데이터의 class에 따라 색상이 달리 나오게 지정 #geom_point()는 그래프에 나오는 모든 데이터를 점으로 표현
#ggplot의 첫번째 매개변수로는 데이터프레임을 줘야한다.
ggsave("output/result1.png")
mpg
mpg
#[문제2] mpg 데이터셋을 사용한다.
#자동차 중에서 어떤 class(자동차 종류)가 가장 많은지 알아보려고 한다. 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 본다.
mpg <- as.data.frame(ggplot2::mpg) #ggplot2::mpg은 tibble 타입이다. #library(ggplot2)를 실행하면 ggplot2:: 생략 가능
ggplot(data = mpg, aes(x = class, fill=drv)) + geom_bar()
ggsave("output/result2.png")
#[문제3] product_click.log 파일에서 클릭된 상품의 수를 적용한 바 그래프를 출력한다.
df <- read.table("data/product_click.log")
#names(click_count)=c('clicktime','pid') #lab10.R 2번문제 참고함 #ggplot패키지에서는 rename이라고 있음.(exam10.R)
table(df)
#names(click_count)=c('clicktime','pid') #lab10.R 2번문제 참고함 #ggplot패키지에서는 rename이라고 있음.(exam10.R)
table(df["V2"])
ggplot(data=df, aes(x=V2)) + labs(title = "제품당 클릭수", subtitle="제품당 클릭수를 바그래프로 표현", x="상품ID", y="클릭수") + geom_bar(aes(fill=V2)) #aes(fill=V2)을 geom_bar에다가 하면 여기에만 적용되는데 ggplot에다가 하면 그 그래프에 오는 모든 geom_시리즈에 적용된다.
table(df$V2)
theme_bw()
ggplot(data=df, aes(x=V2)) + labs(title = "제품당 클릭수", subtitle="제품당 클릭수를 바그래프로 표현", x="상품ID", y="클릭수") + geom_bar(aes(fill=V2))
data("GNI2014")
data(GNI2014)
str(GNI2014)
str("GNI2014")
library(treemap)
data(GNI2014)
str(GNI2014)
treemap(GNI2014, vSize = "population",
index = c("continent", "country"),
title = "전세계 인구 정보",
fontfamily.title = "maple",
fontfamily.labels = "maple",
fontsize.title = 20,
fontsize.labels = 12,
border.col = "green")
ggsave("output/result4.png")
ggsave("output/result4.png")
dev.copy(png, "output/result4.png")
dev.off()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_bw()
# 다양한 내장 테마  #labs()로 표 제목과 x축이름, y축 이름을 따로 설정할 수 있다.
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_gray() #앞에는 똑같이 출력하고(코드내용은 다 같게 하고) 마지막에 값만 다르게 준다.
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_bw()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_linedraw() #배경에 출력되는 그리드가 진하게 출력된다.
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_light() #배경색이 밝아진다.
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_dark() #배경색이 어두워진다.
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_bw()
ggplot(data=df, aes(x=V2)) + labs(title = "제품당 클릭수", subtitle="제품당 클릭수를 바그래프로 표현", x="상품ID", y="클릭수") + geom_bar(aes(fill=V2)) +theme_bw() + theme(text=element_text(family="dog", size=20))#aes(fill=V2)을 geom_bar에다가 하면 여기에만 적용되는데 ggplot에다가 하면 그 그래프에 오는 모든 geom_시리즈에 적용된다.
ggplot(data=df, aes(x=V2)) + labs(title = "제품당 클릭수", subtitle="제품당 클릭수를 바그래프로 표현", x="상품ID", y="클릭수") + geom_bar(aes(fill=V2)) +theme_bw() + theme(text=element_text(family="dog", size=10))#aes(fill=V2)을 geom_bar에다가 하면 여기에만 적용되는데 ggplot에다가 하면 그 그래프에 오는 모든 geom_시리즈에 적용된다.
ggplot(data=df, aes(x=V2)) + labs(title = "제품당 클릭수", subtitle="제품당 클릭수를 바그래프로 표현", x="상품ID", y="클릭수") + geom_bar(aes(fill=V2)) +theme_bw() + theme(text=element_text(family="dog", size=15))#aes(fill=V2)을 geom_bar에다가 하면 여기에만 적용되는데 ggplot에다가 하면 그 그래프에 오는 모든 geom_시리즈에 적용된다.
library(ggplot2)
library(showtext)
showtext_auto() #showtext 패키지에게 필요한 상황이 되면 폰트 출력 모드를 켜고 끄는 것을 알아서 하라는 지시
font_add(family = "cat", regular = "fonts/HoonWhitecatR.ttf")
font_add(family = "dog", regular = "fonts/THEdog.ttf")
font_add(family = "maple", regular = "fonts/MaplestoryBold.ttf")
#showtext_opts(dpi = 300) #글자크기를 지정한다. #기본값은 75
#[문제1]
#score.csv 를 읽고 student 라는 데이터프레임을 생성한다. class 컬럼의 값을 팩터형으로 변환한다.
#class 컬럼의 값별로 칼라를 지정하여 수학 점수와 과학 점수에 대한 산점도를 그린다.
student <- read.csv("data/score.csv")
student$class <- as.factor(student$class) #팩터형으로 변환
str(student)
ggplot(student,aes(math, science, color=class)) + geom_point() + #x축과 y축을 지정하고 범례를 정한다음 각 데이터의 class에 따라 색상이 달리 나오게 지정 #geom_point()는 그래프에 나오는 모든 데이터를 점으로 표현
theme(text = element_text(size=15)) #텍스트 사이즈 설정
#ggplot의 첫번째 매개변수로는 데이터프레임을 줘야한다.
ggsave("output/result1.png")
#dev.copy(png, "output/result1.png")
#dev.off()
#[문제2] mpg 데이터셋을 사용한다.
#자동차 중에서 어떤 class(자동차 종류)가 가장 많은지 알아보려고 한다. 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 본다.
mpg <- as.data.frame(ggplot2::mpg) #ggplot2::mpg은 tibble 타입이다. #library(ggplot2)를 실행하면 ggplot2:: 생략 가능
ggplot(data = mpg, aes(x = class, fill=drv)) + geom_bar()
ggsave("output/result2.png")
#[문제3] product_click.log 파일에서 클릭된 상품의 수를 적용한 바 그래프를 출력한다.
df <- read.table("data/product_click.log")
#names(click_count)=c('clicktime','pid') #lab10.R 2번문제 참고함 #ggplot패키지에서는 rename이라고 있음.(exam10.R)
table(df["V2"]) #table(df$V2)
ggplot(data=df, aes(x=V2)) + labs(title = "제품당 클릭수", subtitle="제품당 클릭수를 바그래프로 표현", x="상품ID", y="클릭수") + geom_bar(aes(fill=V2)) +theme_bw() + theme(text=element_text(family="dog", size=15))#aes(fill=V2)을 geom_bar에다가 하면 여기에만 적용되는데 ggplot에다가 하면 그 그래프에 오는 모든 geom_시리즈에 적용된다.
#subtitle은 부제목으로 제목 밑에 출력
#[ 문제4 ]
#다음과 같이 출력되는 treepmap을 그려본다. 데이터는 GNI2014 데이터셋을 사용한다.
#data(GNI2014) 명령을 실행시켜서 GNI2014 데이터셋을 로드한다.
#영역을 나누는 우선 순위 : 대륙, 나라코드
#영역의 크기를 결정하는 값 : 인구수
#treemap() 함수의 도큐먼트를 읽어보고 제목폰트의 사이즈를 20으로 하고 보더의 칼라를 green 으로 한다.
#그려진 그래프는 result4.png 로 저장한다.(기본 그래프의 저장 방법을 사용해야 한다.
library(treemap)
data(GNI2014)
str(GNI2014)
treemap(GNI2014, vSize = "population",
index = c("continent", "country"),
title = "전세계 인구 정보",
fontfamily.title = "maple",
fontfamily.labels = "maple",
fontsize.title = 20,
fontsize.labels = 12,
border.col = "green")
dev.copy(png, "output/result4.png")
dev.off()
student <- read.csv("data/score.csv")
student$class <- as.factor(student$class) #팩터형으로 변환
str(student)
ggplot(student,aes(math, science, color=class)) + geom_point() + #x축과 y축을 지정하고 범례를 정한다음 각 데이터의 class에 따라 색상이 달리 나오게 지정 #geom_point()는 그래프에 나오는 모든 데이터를 점으로 표현
theme(text = element_text(size=15)) #텍스트 사이즈 설정
ggsave("output/result1.png")
#[문제2] mpg 데이터셋을 사용한다.
#자동차 중에서 어떤 class(자동차 종류)가 가장 많은지 알아보려고 한다. 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 본다.
mpg <- as.data.frame(ggplot2::mpg) #ggplot2::mpg은 tibble 타입이다. #library(ggplot2)를 실행하면 ggplot2:: 생략 가능
ggplot(data = mpg, aes(x = class, fill=drv)) + geom_bar()
ggsave("output/result2.png")
#[문제3] product_click.log 파일에서 클릭된 상품의 수를 적용한 바 그래프를 출력한다.
df <- read.table("data/product_click.log")
#names(click_count)=c('clicktime','pid') #lab10.R 2번문제 참고함 #ggplot패키지에서는 rename이라고 있음.(exam10.R)
table(df["V2"]) #table(df$V2)
ggplot(data=df, aes(x=V2)) + labs(title = "제품당 클릭수", subtitle="제품당 클릭수를 바그래프로 표현", x="상품ID", y="클릭수") + geom_bar(aes(fill=V2)) +theme_bw() + theme(text=element_text(family="dog", size=15))#aes(fill=V2)을 geom_bar에다가 하면 여기에만 적용되는데 ggplot에다가 하면 그 그래프에 오는 모든 geom_시리즈에 적용된다.
#[ 문제4 ]
#다음과 같이 출력되는 treepmap을 그려본다. 데이터는 GNI2014 데이터셋을 사용한다.
#data(GNI2014) 명령을 실행시켜서 GNI2014 데이터셋을 로드한다.
#영역을 나누는 우선 순위 : 대륙, 나라코드
#영역의 크기를 결정하는 값 : 인구수
#treemap() 함수의 도큐먼트를 읽어보고 제목폰트의 사이즈를 20으로 하고 보더의 칼라를 green 으로 한다.
#그려진 그래프는 result4.png 로 저장한다.(기본 그래프의 저장 방법을 사용해야 한다.
library(treemap)
data(GNI2014)
str(GNI2014)
treemap(GNI2014, vSize = "population",
index = c("continent", "country"),
title = "전세계 인구 정보",
fontfamily.title = "maple",
fontfamily.labels = "maple",
fontsize.title = 20,
fontsize.labels = 12,
border.col = "green")
dev.copy(png, "output/result4.png")
dev.off()
ggplot(data=df, aes(x=V2)) + labs(title = "제품당 클릭수", subtitle="제품당 클릭수를 바그래프로 표현", x="상품ID", y="클릭수") + geom_bar(aes(fill=V2)) +theme_bw() + theme(text=element_text(family="dog", size=15))#aes(fill=V2)을 geom_bar에다가 하면 여기에만 적용되는데 ggplot에다가 하면 그 그래프에 오는 모든 geom_시리즈에 적용된다.
#subtitle은 부제목으로 제목 밑에 출력
ggsave("output/result3.png")
ggplot(data=df, aes(x=V2)) + labs(title = "제품당 클릭수", subtitle="제품당 클릭수를 바그래프로 표현", x="상품ID", y="클릭수") + geom_bar(aes(fill=V2)) +theme_bw() + theme(text=element_text(family="dog", size=20))#aes(fill=V2)을 geom_bar에다가 하면 여기에만 적용되는데 ggplot에다가 하면 그 그래프에 오는 모든 geom_시리즈에 적용된다.
#subtitle은 부제목으로 제목 밑에 출력
ggsave("output/result3.png")
my.col <- c('black', 'blue','red', 'green','purple','dark gray')
my.lty <- 1:6
plot(1:12,                       # x data
ds[1,],                     # y data(1974년 자료)
main='월별 사망자 추이',    # 그래프 제목
type='b',                   # 그래프 종류
lty=my.lty[1],              # 선의 종류
xlab='Month',               # x축 레이블
ylab='사망자수',            # y축 레이블
ylim=c(300,1200),           # y축 값의 범위
col=my.col[1]               # 선의 색
)
ds <- read.csv('data/fdeaths.csv', row.names='year')
ds
my.col <- c('black', 'blue','red', 'green','purple','dark gray')
my.lty <- 1:6
plot(1:12,                       # x data
ds[1,],                     # y data(1974년 자료)
main='월별 사망자 추이',    # 그래프 제목
type='b',                   # 그래프 종류
lty=my.lty[1],              # 선의 종류
xlab='Month',               # x축 레이블
ylab='사망자수',            # y축 레이블
ylim=c(300,1200),           # y축 값의 범위
col=my.col[1]               # 선의 색
)
# (1) 자료 확인 50x8 의 매트릭스 #책 383pg
#  면적(area), 인구(Population), 수입(Income),  문맹률(illiteracy),
#  기대수명(life.exp), 결빙일수(frost), 살인및과실치사율(murder), 고등학교졸업율(HS grad)
st <- data.frame(state.x77)     # 매트릭스를 데이터프레임으로 변환
head(st)
# (3) 다중 상관계수
(c_v <- cor(st)) #2차원 구조로 변수끼리의 상관계수를 보여준다.
install.packages("corrplot")
library(corrplot)
corrplot(c_v) # method="circle
corrplot(c_v, method="shade")
corrplot(c_v, method="ellipse")
corrplot(c_v, method="color")
corrplot(c_v, method="number")
corrplot(c_v, order="hclust")
corrplot(c_v, method="number")
corrplot(c_v, method="color")
corrplot(c_v, order="hclust")
iris
agg
# [ stats 패키지 : aggreate() ] #책 415pg
# aggregate(data, by = '기준이 되는 컬럼에 대한 list객체', FUN) #FUN은 집계함수를 뜻한다. 이걸 쓰면 지정된 컬럼을 기준으로 데이터를 그룹핑한다음에, 그룹단위로 함수를 처리해서 그 결과를 만들어내는 함수다. 그러다보니 dplyr(이게 맞나?) 패키지를 사용하지 않으면 이 함수를 알아야 좀 더 편하게 할 수 있다.
# 특정 컬럼을 기준으로 데이터들을 그루핑해서 FUN 에 전달된 함수 호출
agg <- aggregate(iris[,-5], by=list(iris$Species), FUN=mean) #-5는 5번째(마지막)열 빼고를 뜻함. 5번째열은 Species임. 품종까지 출력하지 말란 뜻 #품종별로 꽃잎과 꽃받침의 폭과 길이의 평균 출력
agg
data(mtcars)
head(mtcars)
agg <- aggregate(mtcars, by=list(cyl=mtcars$cyl,
vs=mtcars$vs),FUN=max) #실린더별로 그룹을 나눈 다음에 그 안에서 vs별로 소그룹을 나누겠다. 그리고 그 그룹안에서의 최댓값을 보여준다.
agg
search() #
library(treemap)                     # treemap 패키지 불러오기 #require()도 패키지를 로드하는데 차이점은 리턴값으로 제대로 실행됐는지 안 됐는지를 알려준다.
data(GNI2014)                        # 데이터 불러오기
head(GNI2014)                        # 데이터 내용 보기
state.x77
# (1) 자료 확인
ds <- read.csv('data/seoul_temp_2017.csv')
dim(ds)
# (2) 서울의 1년 기온 분포
summary(ds$avg_temp)
# (3) 월별 기온 분포
# 월별 평균(중간)기온 계산
month.avg <- aggregate(ds$avg_temp,
by=list(ds$month),median)[2] #meadian은 중간값, mean은 평균값 #mean으로 안 한 이유는 NA의 영향을 받지 않기 위해.
month.avg
#14:00 시작
month.avg <- month.avg[,1] #열이 하나밖에 없는데 이렇게 한 이유는 이렇게 꺼내면 데이터프레임 형태가 아닌 벡터로 꺼낸다.
month.avg
order(-month.avg)
rank(month.avg)
# (3) 월별 기온 분포
# 월별 평균(중간)기온 계산
month.avg <- aggregate(ds$avg_temp,
by=list(ds$month),median)[2] #meadian은 중간값, mean은 평균값 #mean으로 안 한 이유는 NA의 영향을 받지 않기 위해.
month.avg
#14:00 시작
month.avg <- month.avg[,1] #열이 하나밖에 없는데 이렇게 한 이유는 이렇게 꺼내면 데이터프레임 형태가 아닌 벡터로 꺼낸다.
names(month.avg) <- 1:12 #각각의 엘리먼트마다 이름을 붙여줘서 named vector를 만들었다.
month.avg
# 평균기온 순위 계산 (내림차순)
order(month.avg)
order(c(1,3,1,10,10,2,5,3))
rank(c(1,3,1,10,10,2,5,3)) #같은 값이 여러 개 있다면
rank(c(1,2,3,4,5,6,7))
rank(c(1,1,3,5,5,5,7))
order(c(1,3,1,10,10,2,5,3))
# 평균기온 순위 계산 (내림차순)
order(month.avg) #정렬한 후 인덱스를 담고있는 벡터를 리턴한다.
month.avg
#14:00 시작
month.avg <- month.avg[,1] #열이 하나밖에 없는데 이렇게 한 이유는 이렇게 꺼내면 데이터프레임 형태가 아닌 벡터로 꺼낸다.
names(month.avg) <- 1:12 #각각의 엘리먼트마다 이름을 붙여줘서 named vector를 만들었다.
month.avg
# 평균기온 순위 계산 (내림차순)
order(month.avg) #정렬한 후 인덱스를 담고있는 벡터를 리턴한다.
month.avg
library(fmsb)
install.packages('fmsb')
library(fmsb)
# (3) 월별 기온 분포
# 월별 평균(중간)기온 계산
month.avg <- aggregate(ds$avg_temp,
by=list(ds$month),median)[2] #meadian은 중간값, mean은 평균값 #mean으로 안 한 이유는 NA의 영향을 받지 않기 위해.
month.avg
#14:00 시작
month.avg <- month.avg[,1] #열이 하나밖에 없는데 이렇게 한 이유는 이렇게 꺼내면 데이터프레임 형태가 아닌 벡터로 꺼낸다.
names(month.avg) <- 1:12 #각각의 엘리먼트마다 이름을 붙여줘서 named vector를 만들었다.
month.avg
# 평균기온 순위 계산 (내림차순)
order(month.avg) #정렬한 후 인덱스를 담고있는 벡터를 리턴한다.
order(-month.avg)
order(c(1,3,1,10,10,2,5,3))
library(HSAUR)
install.packages("HSAUR")
library(HSAUR)
library(HSAUR)
data("Forbes2000") #따옴표는 줘도 되고 안 줘도 된다. #포브스 선정 세계 2000대 기업
ds <- Forbes2000
ds
ds <- Forbes2000
ds[!complete.cases(ds),]          # 결측값 확인
str(ds)
head(ds)
table(ds$country)
tmp <- read.csv(f, header=T)
files <- c('data/ds.2015.csv', 'data/ds.2016.csv','data/ds.2017.csv',
'data/ds.2018.csv','data/ds.2019.csv')
ds <- NULL
for (f in files) {
tmp <- read.csv(f, header=T)
ds <- rbind(ds, tmp)
print(f)
}
tmp.year <- aggregate(ds[,7], by=list(year=ds$year,loc=ds$locname), FUN='mean')
library(ggplot2)
tmp.year <- aggregate(ds[,7], by=list(year=ds$year,loc=ds$locname), FUN='mean')
ds <- NULL
for (f in files) {
tmp <- read.csv(f, header=T)
ds <- rbind(ds, tmp) #기존 데이터프레임 밑에 새로운 데이터프레임을 새로운 행으로 추가시킨다.
print(f)
}
str(ds)
head(ds)
unique(ds$loc)                             # 관측 장소
range(ds$mdate)                            # 측정 기간
# 열별 결측값 확인
for (i in 3:8) {
cat(names(ds)[i], sum(is.na(ds[,i])), sum(is.na(ds[,i]))/nrow(ds), '\n')
}
ds <- ds[,-8]                              # PM25 열 제거
ds <- ds[complete.cases(ds),]              # 결측값이 포함된 행 제거
mdate <- as.character(ds$mdate)
head(mdate)
ds$year  <- as.numeric(substr(mdate, 1,4))  # 연도
ds$month <- as.numeric(substr(mdate, 5,6))  # 월
ds$hour  <- as.numeric(substr(mdate, 9,10)) # 시간
ds$locname <- NA                            # locname 열을 추가
ds$locname[ds$loc==111123] <- '서울'        # 도시
ds$locname[ds$loc==336111] <- '목포'        # 도시
ds$locname[ds$loc==632132] <- '강릉'        # 도시
head(ds)
boxplot(PM10~locname, data=ds,
main='미세먼지 농도 분포')
boxplot(PM10~locname, data=ds,
main='미세먼지 농도 분포',
ylim=c(1,100)) #y축의 범위를 1~100으로 지정해준다.
library(ggplot2)
tmp.year <- aggregate(ds[,7], by=list(year=ds$year,loc=ds$locname), FUN='mean')
tmp.year$loc = as.factor(tmp.year$loc) #일부 열을 팩터형으로 변환
head(tmp.year) #위에서 6개 행만 보여준다.
ggplot(tmp.year, aes(x=year,y=x, colour=loc, group=loc))+
geom_line()+
geom_point(size=6, shape=19, alpha=0.5)+
ggtitle('연도별 PM10 농도 변화')+
ylab('농도')
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(colour="grey", shape=21, size=6)
# A, B회사의 매출 실적 데이터프레임 만들기
company <- c('A', 'A', 'A', 'A', 'B', 'B', 'B', 'B')
year <- c('1980', '1990', '2000', '2010', '1980', '1990', '2000', '2010')
sales <- c(2750, 2800, 2830, 2840, 2760, 2765, 2775, 2790)
coSalesDF <- data.frame(company, year, sales) #데이터 프레임 생성
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6) #만약 로드를 안 했다면 Cars93마다 MASS를 붙여야 한다.
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, colour="blue") #테두리 색은 파랑 #colour대신 color, col도 가능
str(Cars93) #(library()로) 로드하고 나니까 이게 보인다.
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6) #만약 로드를 안 했다면 Cars93마다 MASS를 붙여야 한다.
library(MASS)
str(Cars93) #(library()로) 로드하고 나니까 이게 보인다.
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6) #만약 로드를 안 했다면 Cars93마다 MASS를 붙여야 한다.
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, colour="blue") #테두리 색은 파랑 #colour대신 color, col도 가능
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, fill="blue")   #안에 파랑색으로 채움(테두리선 색은 디폴트로 검정)
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, fill="blue", colour="pink") #파랑색으로 채우고 테두리선은 분홍색
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(colour="grey", shape=21, size=6)
ggplot(tmp.year, aes(x=year,y=x, colour=loc, group=loc))+
geom_line()+
geom_point(size=6, shape=19, alpha=0.5)+ #alpha는 투명도를 의미한다. 0.0은 완전투명, 1.0은 완전 불투명
ggtitle('연도별 PM10 농도 변화')+
ylab('농도')
tmp.month <- aggregate(ds[,7], by=list(month=ds$month,loc=ds$locname),
FUN='mean')
# 점의 종류와 색상
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(size=2, aes(group=company, colour=company)) + geom_point(size=2, shape = 5) #3.4.0부터 size대신 linewidth 쓰라고 에러떴는데 여기서는 왜인지 안 바꿔도 됨
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(size=2, aes(group=company, colour=company)) + geom_point(size=2, shape = '가')
