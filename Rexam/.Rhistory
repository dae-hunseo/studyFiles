twoPlusOne_contentLink<-remDr$findElements(using='css selector',  twoPlusOne_link) #2+!행사 버튼 객체 정보를 가져옴
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
twoPlusOne_contentLink<-remDr$findElements(using='css selector',  twoPlusOne_link) #2+!행사 버튼 객체 정보를 가져옴
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome") #셀레니움 불러옴 #접속이 성공적으로 일어나면 remoteDriver 객체가 리턴된다. #포트번호를 4445로 해주는 이유는 이걸 실행시키기 위해서 cmd창에다가 코드를 입력해야하는데 그 때 포트 번호를 4445로 해줬기 때문.
remDr$open() #셀레니움 서버에 의해 구동되는 크롬 브라우저 창이 열린다
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
Sys.sleep(2)
#2+1 행사 버튼 경로
##TWO_TO_ONE
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
twoPlusOne_contentLink<-remDr$findElements(using='css selector',  twoPlusOne_link) #2+!행사 버튼 객체 정보를 가져옴
remDr$executeScript("arguments[0].click();",twoPlusOne_contentLink); #클릭 이벤트 실행
Sys.sleep(2)
eventgoodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(3) > ul > li > div > p.tit')
eventgoodsname <- sapply(eventgoodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
eventgoodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(3) > ul > li > div > p.price > span')
eventgoodsprice <- sapply(eventgoodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
data.frame(egn = unlist(eventgoodsname), egp = unlist(eventgoodsprice)) #이름과 가격으로 데이터프레임 생성
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome") #셀레니움 불러옴 #접속이 성공적으로 일어나면 remoteDriver 객체가 리턴된다. #포트번호를 4445로 해주는 이유는 이걸 실행시키기 위해서 cmd창에다가 코드를 입력해야하는데 그 때 포트 번호를 4445로 해줬기 때문.
remDr$open() #셀레니움 서버에 의해 구동되는 크롬 브라우저 창이 열린다
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
Sys.sleep(2)
#2+1 행사 버튼 경로
##TWO_TO_ONE
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
twoPlusOne_contentLink<-remDr$findElement(using='css selector',  twoPlusOne_link) #2+!행사 버튼 객체 정보를 가져옴
remDr$executeScript("arguments[0].click();",twoPlusOne_contentLink); #클릭 이벤트 실행
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome") #셀레니움 불러옴 #접속이 성공적으로 일어나면 remoteDriver 객체가 리턴된다. #포트번호를 4445로 해주는 이유는 이걸 실행시키기 위해서 cmd창에다가 코드를 입력해야하는데 그 때 포트 번호를 4445로 해줬기 때문.
remDr$open() #셀레니움 서버에 의해 구동되는 크롬 브라우저 창이 열린다
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
Sys.sleep(2)
#2+1 행사 버튼 경로
##TWO_TO_ONE
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector',  twoPlusOne_link)) #2+!행사 버튼 객체 정보를 가져옴
remDr$executeScript("arguments[0].click();",twoPlusOne_contentLink); #클릭 이벤트 실행
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome") #셀레니움 불러옴 #접속이 성공적으로 일어나면 remoteDriver 객체가 리턴된다. #포트번호를 4445로 해주는 이유는 이걸 실행시키기 위해서 cmd창에다가 코드를 입력해야하는데 그 때 포트 번호를 4445로 해줬기 때문.
remDr$open() #셀레니움 서버에 의해 구동되는 크롬 브라우저 창이 열린다
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
Sys.sleep(2)
#2+1 행사 버튼 경로
##TWO_TO_ONE
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector',  twoPlusOne_link)) #2+!행사 버튼 객체 정보를 가져옴
remDr$executeScript("argument.click();",twoPlusOne_contentLink); #클릭 이벤트 실행
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome") #셀레니움 불러옴 #접속이 성공적으로 일어나면 remoteDriver 객체가 리턴된다. #포트번호를 4445로 해주는 이유는 이걸 실행시키기 위해서 cmd창에다가 코드를 입력해야하는데 그 때 포트 번호를 4445로 해줬기 때문.
remDr$open() #셀레니움 서버에 의해 구동되는 크롬 브라우저 창이 열린다
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
Sys.sleep(2)
#2+1 행사 버튼 경로
##TWO_TO_ONE
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector', twoPlusOne_link)) #2+1행사 버튼 객체 정보를 가져옴
twoPlusOne_contentLink$clickElement()
Sys.sleep(2)
eventgoodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(3) > ul > li > div > p.tit')
eventgoodsname <- sapply(eventgoodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
eventgoodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(3) > ul > li > div > p.price > span')
eventgoodsprice <- sapply(eventgoodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
eventgoodsname
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector', twoPlusOne_link)) #2+1행사 버튼 객체 정보를 가져옴
twoPlusOne_contentLink$clickElement()
Sys.sleep(2)
eventgoodsnodes <- remDr$findElements(using='css selector', 'contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
eventgoodsname <- sapply(eventgoodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
eventgoodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
eventgoodsprice <- sapply(eventgoodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
data.frame(egn = unlist(eventgoodsname), egp = unlist(eventgoodsprice)) #이름과 가격으로 데이터프레임 생성
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector', twoPlusOne_link)) #2+1행사 버튼 객체 정보를 가져옴
twoPlusOne_contentLink$clickElement()
Sys.sleep(2)
eventgoodsnodes <- remDr$findElements(using='css selector', 'contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
eventgoodsname <- sapply(eventgoodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
eventgoodsname
eventgoodsname
eventgoodsname
eventgoodsname
unlist(eventgoodsname)
unlist(eventgoodsname)
unlist(eventgoodsname)
unlist(eventgoodsname)
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector', twoPlusOne_link)) #2+1행사 버튼 객체 정보를 가져옴
twoPlusOne_contentLink$clickElement()
Sys.sleep(2)
eventgoodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
eventgoodsname <- sapply(eventgoodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
eventgoodsname
eventgoodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
eventgoodsprice <- sapply(eventgoodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
eventgoodsprice
data.frame(egn = unlist(eventgoodsname), egp = unlist(eventgoodsprice)) #이름과 가격으로 데이터프레임 생성
data.frame(name = unlist(eventgoodsname), price = unlist(eventgoodsprice)) #이름과 가격으로 데이터프레임 생성
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
data.frame(name = unlist(goodsname), price = unlist(goodsprice)) #이름과 가격으로 데이터프레임 생성
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
goodsprice
data.frame(name = unlist(goodsname), price = unlist(goodsprice)) #이름과 가격으로 데이터프레임 생성
url<-'https://www.agoda.com/ko-kr/shilla-stay-yeoksam/hotel/seoul-kr.html?asq=z91SVm7Yvc0eRE%2FTBXmZWCYGcVeTALbG%2FvMXOYFqqcm2JknkW25Du%2BVdjH%2FesXg8ORIaVs1PaEgwePlsVWfwf3sX%2BVNABRcMMOWSvzQ9BxqOPOsvzl8390%2BEhEylPvEiBp0eoREr2xLYHgqmk0Io4J1HYEzEOqyvdox%2BwS6yxHeonB9lh7mJsBIjSBPoMzBLFW01k%2BU8s2bGO6PcSdsu3T30HwabyNzwNYKiv%2BRDxfs%3D&hotel=699258&tick=637215342272&languageId=9&userId=bcb7ecc6-7719-465f-bf29-951e39733c66&sessionId=uouhnqjisace4freagmzbxxc&pageTypeId=7&origin=KR&locale=ko-KR&cid=-1&aid=130243&currencyCode=KRW&htmlLanguage=ko-kr&cultureInfoName=ko-KR&ckuid=bcb7ecc6-7719-465f-bf29-951e39733c66&prid=0&checkIn=2020-05-30&checkOut=2020-05-31&rooms=1&adults=1&childs=0&priceCur=KRW&los=1&textToSearch=%EC%8B%A0%EB%9D%BC%EC%8A%A4%ED%85%8C%EC%9D%B4%20%EC%97%AD%EC%82%BC%20(Shilla%20Stay%20Yeoksam)&productType=-1&travellerType=0&familyMode=off'
remDr$navigate(url)
remDr$navigate("http://www.yes24.com/24/goods/40936880")
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url)
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
Sys.sleep(2)
#2+1 행사 버튼 경로
##TWO_TO_ONE
#상품명(li에서 뒤에 :nth-child(숫자)를 없애주면 해당 페이지의 2+1행사 상품명들을 다 가져온다.)
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(1) > div > p.tit
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(2) > div > p.tit
#가격
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(1) > div > p.price > span
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(2) > div > p.price > span
#Next 버튼
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > div > a.next
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector', twoPlusOne_link)) #2+1행사 버튼 객체 정보를 가져옴
twoPlusOne_contentLink$clickElement() #클릭 이벤트 실행
Sys.sleep(2)
#첫번째 페이지 데이터 수집
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- data.frame(name = unlist(goodsname), price = unlist(goodsprice)) #이름과 가격으로 데이터프레임 생성
df
View(df)
repeat{
try(nextBtn_link <- remDr$findElement(using='css selector', nextBtn)) #Next 버튼 객체 정보를 가져옴
nextBtn_link$clickElement()
Sys.sleep(2)
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- rbind(unlist(goodsname), unlist(goodsprice)) #rbind 함수 사용하여 기존 데이터프레임에 행을 붙임
if (length(unlist(goodsname)) != 8) { #한 페이지에 상품이 8개가 꽉 채워져있지 않으면 맨 마지막 페이지까지 읽은 것. #exam7.R es24 명견만리코드 참고함.
#endFlag <- TRUE
break
}
}
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector', twoPlusOne_link)) #2+1행사 버튼 객체 정보를 가져옴
twoPlusOne_contentLink$clickElement() #클릭 이벤트 실행
Sys.sleep(2)
#첫번째 페이지 데이터 수집
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- data.frame(name = unlist(goodsname), price = unlist(goodsprice)) #이름과 가격으로 데이터프레임 생성
nextBtn <- '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > div > a.next' #Next버튼 path
repeat{
try(nextBtn_link <- remDr$findElement(using='css selector', nextBtn)) #Next 버튼 객체 정보를 가져옴
nextBtn_link$clickElement()
Sys.sleep(2)
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- rbind(unlist(goodsname), unlist(goodsprice)) #rbind 함수 사용하여 기존 데이터프레임에 행을 붙임
if (length(unlist(goodsname)) != 8) { #한 페이지에 상품이 8개가 꽉 채워져있지 않으면 맨 마지막 페이지까지 읽은 것. #exam7.R es24 명견만리코드 참고함.
#endFlag <- TRUE
break
}
}
View(df)
library(RSelenium)
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome") #셀레니움 불러옴 #접속이 성공적으로 일어나면 remoteDriver 객체가 리턴된다. #포트번호를 4445로 해주는 이유는 이걸 실행시키기 위해서 cmd창에다가 코드를 입력해야하는데 그 때 포트 번호를 4445로 해줬기 때문.
remDr$open() #셀레니움 서버에 의해 구동되는 크롬 브라우저 창이 열린다
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
Sys.sleep(2)
#2+1 행사 버튼 경로
##TWO_TO_ONE
#상품명(li에서 뒤에 :nth-child(숫자)를 없애주면 해당 페이지의 2+1행사 상품명들을 다 가져온다.)
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(1) > div > p.tit
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(2) > div > p.tit
#가격
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(1) > div > p.price > span
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(2) > div > p.price > span
#Next 버튼
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > div > a.next
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector', twoPlusOne_link)) #2+1행사 버튼 객체 정보를 가져옴
twoPlusOne_contentLink$clickElement() #클릭 이벤트 실행
Sys.sleep(2)
#첫번째 페이지 데이터 수집
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- data.frame(name = unlist(goodsname), price = unlist(goodsprice)) #이름과 가격으로 데이터프레임 생성
nextBtn <- '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > div > a.next' #Next버튼 path
repeat{
try(nextBtn_link <- remDr$findElement(using='css selector', nextBtn)) #Next 버튼 객체 정보를 가져옴
nextBtn_link$clickElement()
Sys.sleep(2)
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- cbind(unlist(goodsname), unlist(goodsprice)) #cbind 함수 사용하여 기존 데이터프레임에 열을 붙임
if (length(unlist(goodsname)) != 8) { #한 페이지에 상품이 8개가 꽉 채워져있지 않으면 맨 마지막 페이지까지 읽은 것. #exam7.R es24 명견만리코드 참고함.
#endFlag <- TRUE
break
}
}
View(df)
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome") #셀레니움 불러옴 #접속이 성공적으로 일어나면 remoteDriver 객체가 리턴된다. #포트번호를 4445로 해주는 이유는 이걸 실행시키기 위해서 cmd창에다가 코드를 입력해야하는데 그 때 포트 번호를 4445로 해줬기 때문.
remDr$open() #셀레니움 서버에 의해 구동되는 크롬 브라우저 창이 열린다
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
Sys.sleep(2)
#2+1 행사 버튼 경로
##TWO_TO_ONE
#상품명(li에서 뒤에 :nth-child(숫자)를 없애주면 해당 페이지의 2+1행사 상품명들을 다 가져온다.)
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(1) > div > p.tit
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(2) > div > p.tit
#가격
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(1) > div > p.price > span
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(2) > div > p.price > span
#Next 버튼
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > div > a.next
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector', twoPlusOne_link)) #2+1행사 버튼 객체 정보를 가져옴
twoPlusOne_contentLink$clickElement() #클릭 이벤트 실행
Sys.sleep(2)
#첫번째 페이지 데이터 수집
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- data.frame(name = unlist(goodsname), price = unlist(goodsprice)) #이름과 가격으로 데이터프레임 생성
nextBtn <- '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > div > a.next' #Next버튼 path
repeat{
try(nextBtn_link <- remDr$findElement(using='css selector', nextBtn)) #Next 버튼 객체 정보를 가져옴
nextBtn_link$clickElement()
Sys.sleep(2)
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- NULL
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- NULL
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- rbind(df, data.frame(name = unlist(goodsname), price = unlist(goodsprice))) #rbind 함수 사용하여 기존 데이터프레임에 추가할 데이터프레임을 붙임
if (length(unlist(goodsname)) != 8) { #한 페이지에 상품이 8개가 꽉 채워져있지 않으면 맨 마지막 페이지까지 읽은 것. #exam7.R es24 명견만리코드 참고함.
#endFlag <- TRUE
break
}
}
View(df)
write.csv(df, "output/gs25_twotoone.csv") #txt 파일로 만드는 경우 write()사용
?findElement
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome") #셀레니움 불러옴 #접속이 성공적으로 일어나면 remoteDriver 객체가 리턴된다. #포트번호를 4445로 해주는 이유는 이걸 실행시키기 위해서 cmd창에다가 코드를 입력해야하는데 그 때 포트 번호를 4445로 해줬기 때문.
remDr$open() #셀레니움 서버에 의해 구동되는 크롬 브라우저 창이 열린다
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
Sys.sleep(2)
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome") #셀레니움 불러옴 #접속이 성공적으로 일어나면 remoteDriver 객체가 리턴된다. #포트번호를 4445로 해주는 이유는 이걸 실행시키기 위해서 cmd창에다가 코드를 입력해야하는데 그 때 포트 번호를 4445로 해줬기 때문.
remDr$open() #셀레니움 서버에 의해 구동되는 크롬 브라우저 창이 열린다
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
Sys.sleep(2)
#2+1 행사 버튼 경로
##TWO_TO_ONE
#상품명(li에서 뒤에 :nth-child(숫자)를 없애주면 해당 페이지의 2+1행사 상품명들을 다 가져온다.)
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(1) > div > p.tit
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(2) > div > p.tit
#가격
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(1) > div > p.price > span
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(2) > div > p.price > span
#Next 버튼
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > div > a.next
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector', twoPlusOne_link)) #2+1행사 버튼 객체 정보를 가져옴
twoPlusOne_contentLink$clickElement() #클릭 이벤트 실행
Sys.sleep(2)
#첫번째 페이지 데이터 수집
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- data.frame(name = unlist(goodsname), price = unlist(goodsprice)) #이름과 가격으로 데이터프레임 생성
?findElement
nextBtn <- '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > div > a.next' #Next버튼 path
repeat{
try(nextBtn_link <- remDr$findElement(using='css selector', nextBtn)) #Next 버튼 객체 정보를 가져옴
nextBtn_link$clickElement()
Sys.sleep(2)
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- NULL
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- NULL
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- rbind(df, data.frame(name = unlist(goodsname), price = unlist(goodsprice))) #rbind 함수 사용하여 기존 데이터프레임에 추가할 데이터프레임을 붙임
#if (length(unlist(goodsname)) != 8) { #한 페이지에 상품이 8개가 꽉 채워져있지 않으면 맨 마지막 페이지까지 읽은 것. #exam7.R es24 명견만리코드 참고함.
#  break
#}
if(nextBtn_link$getElementAttribute("onclick") == NULL){ # lat <- sapply(storePage,function(x){x$getElementAttribute("data-lat")}) #exam7.R의 426번째 라인 #정적 수집에서는 html_attr이었음
break
}
# 맨 마지막 페이지에 가면 Next 버튼의 onclick 함수가 없음
#onclick="goodsPageController.moveControl(1)"
}
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome") #셀레니움 불러옴 #접속이 성공적으로 일어나면 remoteDriver 객체가 리턴된다. #포트번호를 4445로 해주는 이유는 이걸 실행시키기 위해서 cmd창에다가 코드를 입력해야하는데 그 때 포트 번호를 4445로 해줬기 때문.
remDr$open() #셀레니움 서버에 의해 구동되는 크롬 브라우저 창이 열린다
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
Sys.sleep(2)
#2+1 행사 버튼 경로
##TWO_TO_ONE
#상품명(li에서 뒤에 :nth-child(숫자)를 없애주면 해당 페이지의 2+1행사 상품명들을 다 가져온다.)
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(1) > div > p.tit
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(2) > div > p.tit
#가격
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(1) > div > p.price > span
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(2) > div > p.price > span
#Next 버튼
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > div > a.next
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector', twoPlusOne_link)) #2+1행사 버튼 객체 정보를 가져옴
twoPlusOne_contentLink$clickElement() #클릭 이벤트 실행
Sys.sleep(2)
#첫번째 페이지 데이터 수집
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- data.frame(name = unlist(goodsname), price = unlist(goodsprice)) #이름과 가격으로 데이터프레임 생성
?findElement
nextBtn <- '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > div > a.next' #Next버튼 path
repeat{
try(nextBtn_link <- remDr$findElement(using='css selector', nextBtn)) #Next 버튼 객체 정보를 가져옴
nextBtn_link$clickElement()
Sys.sleep(2)
if(nextBtn_link$getElementAttribute("onclick") == NULL){ # lat <- sapply(storePage,function(x){x$getElementAttribute("data-lat")}) #exam7.R의 426번째 라인 #정적 수집에서는 html_attr이었음
break
}
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- NULL
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- NULL
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- rbind(df, data.frame(name = unlist(goodsname), price = unlist(goodsprice))) #rbind 함수 사용하여 기존 데이터프레임에 추가할 데이터프레임을 붙임
#if (length(unlist(goodsname)) != 8) { #한 페이지에 상품이 8개가 꽉 채워져있지 않으면 맨 마지막 페이지까지 읽은 것. #exam7.R es24 명견만리코드 참고함.
#  break
#}
# 맨 마지막 페이지에 가면 Next 버튼의 onclick 함수가 없음
#onclick="goodsPageController.moveControl(1)"
}
remDr$open() #셀레니움 서버에 의해 구동되는 크롬 브라우저 창이 열린다
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
Sys.sleep(2)
#2+1 행사 버튼 경로
##TWO_TO_ONE
#상품명(li에서 뒤에 :nth-child(숫자)를 없애주면 해당 페이지의 2+1행사 상품명들을 다 가져온다.)
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(1) > div > p.tit
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(2) > div > p.tit
#가격
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(1) > div > p.price > span
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li:nth-child(2) > div > p.price > span
#Next 버튼
##contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > div > a.next
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector', twoPlusOne_link)) #2+1행사 버튼 객체 정보를 가져옴
twoPlusOne_contentLink$clickElement() #클릭 이벤트 실행
Sys.sleep(2)
#첫번째 페이지 데이터 수집
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- data.frame(name = unlist(goodsname), price = unlist(goodsprice)) #이름과 가격으로 데이터프레임 생성
?findElement
nextBtn <- '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > div > a.next' #Next버튼 path
repeat{
try(nextBtn_link <- remDr$findElement(using='css selector', nextBtn)) #Next 버튼 객체 정보를 가져옴
if(nextBtn$getElementAttribute("onclick") == NULL){ # lat <- sapply(storePage,function(x){x$getElementAttribute("data-lat")}) #exam7.R의 426번째 라인 #정적 수집에서는 html_attr이었음
break
}
nextBtn_link$clickElement()
Sys.sleep(2)
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- NULL
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- NULL
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- rbind(df, data.frame(name = unlist(goodsname), price = unlist(goodsprice))) #rbind 함수 사용하여 기존 데이터프레임에 추가할 데이터프레임을 붙임
#if (length(unlist(goodsname)) != 8) { #한 페이지에 상품이 8개가 꽉 채워져있지 않으면 맨 마지막 페이지까지 읽은 것. #exam7.R es24 명견만리코드 참고함.
#  break
#}
# 맨 마지막 페이지에 가면 Next 버튼의 onclick 함수가 없음
#onclick="goodsPageController.moveControl(1)"
}
(today <- Sys.Date())
as.Date('1/15/2022') # 에러발생
as.Date('2022/1/15') # 잘 인식한다.
as.Date('2022-1-15') # 잘 인식한다.
as.Date('1/15/2022',format='%m/%d/%Y') # format 은 생략 가능
as.Date('1/15/22',format='%m/%d/%Y')
as.Date('1/15/22',format='%m/%d/%y')
as.Date('1/15/22',format='%m/%d/%Y')
as.Date('1/15/22',format='%m/%d/%y')
(today <- Sys.Date()) #today가 보기에는 문자열이지만 Date객체다.
format(today, "%Y년 %m월 %d일")
format(today, "%d일 %B %Y년")
format(today, "%y") #년을 약어로 뒤에 2자리만 출력
format(today, "%Y") #년을 풀로 4자리 출력
format(today, "%B") #월을 풀로 출력
format(today, "%b") #월을 약어로 숫자만 출력
as.Date('1/15/22',format='%m/%d/%y')
x2 <- "20220601"
as.Date(x2, "%Y%m%d")
as.POSIXct(x2, tryFormats="%Y%m%d")
as.POSIXlt(x2, tryFormats="%Y%m%d")
strptime(x2, "%Y%m%d")
#내가 태어난 요일 출력하기
myday <- as.Date("1997-04-20")
weekdays(myday)
#내가 태어난지 며칠(오늘 날짜에서 빼기 연산 실행)
Sys.Date() - myday
#오늘은 xxxx년x월xx일x요일입니다 형식으로 출력
tmp<-Sys.Date()
format(tmp,'오늘은 %Y년 %B %d일 %A입니다')
nextBtn_link
nextBtn_link$getElementAttribute("onclick")
remDr <- remoteDriver(remoteServerAddr = "localhost" ,
port = 4445, browserName = "chrome") #셀레니움 불러옴 #접속이 성공적으로 일어나면 remoteDriver 객체가 리턴된다. #포트번호를 4445로 해주는 이유는 이걸 실행시키기 위해서 cmd창에다가 코드를 입력해야하는데 그 때 포트 번호를 4445로 해줬기 때문.
remDr$open() #셀레니움 서버에 의해 구동되는 크롬 브라우저 창이 열린다
url <- 'http://gs25.gsretail.com/gscvs/ko/products/event-goods'
remDr$navigate(url) #새로 열린 창에서 gs25 홈페이지에 접속하도록 렌더링 시킨다. 이런 모든 처리는 셀레니움 서버를 통해서 브라우저가 하도록 한다.
Sys.sleep(2)
twoPlusOne_link <- '#TWO_TO_ONE' #2+1 행사 path
try(twoPlusOne_contentLink <- remDr$findElement(using='css selector', twoPlusOne_link)) #2+1행사 버튼 객체 정보를 가져옴
twoPlusOne_contentLink$clickElement() #클릭 이벤트 실행
Sys.sleep(2)
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- data.frame(name = unlist(goodsname), price = unlist(goodsprice)) #이름과 가격으로 데이터프레임 생성
?findElement
nextBtn <- '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > div > a.next' #Next버튼 path
repeat{
try(nextBtn_link <- remDr$findElement(using='css selector', nextBtn)) #Next 버튼 객체 정보를 가져옴
if(nextBtn_link$getElementAttribute("onclick") == NULL){ # lat <- sapply(storePage,function(x){x$getElementAttribute("data-lat")}) #exam7.R의 426번째 라인 #정적 수집에서는 html_attr이었음
break
}
nextBtn_link$clickElement()
Sys.sleep(2)
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.tit')
goodsname <- NULL
goodsname <- sapply(goodsnodes, function(x) {x$getElementText()}) #상품정보(이름) 가져옴.
goodsnodes <- remDr$findElements(using='css selector', '#contents > div.cnt > div.cnt_section.mt50 > div > div > div:nth-child(5) > ul > li > div > p.price > span')
goodsprice <- NULL
goodsprice <- sapply(goodsnodes, function(x) {x$getElementText()}) #가격을 가져옴.
goodsprice <- gsub("\\D", "", goodsprice) #숫자를 제외하고 없앤다. exam6.R 126번째 라인 참고함
df <- rbind(df, data.frame(name = unlist(goodsname), price = unlist(goodsprice))) #rbind 함수 사용하여 기존 데이터프레임에 추가할 데이터프레임을 붙임
if (length(unlist(goodsname)) != 8) { #한 페이지에 상품이 8개가 꽉 채워져있지 않으면 맨 마지막 페이지까지 읽은 것. #exam7.R es24 명견만리코드 참고함.
break
}
# 맨 마지막 페이지에 가면 Next 버튼의 onclick 함수가 없음
#onclick="goodsPageController.moveControl(1)"
}
nextBtn_link$getElementAttribute("onclick")
nextBtn_link$getElementAttribute("onclick")
nextBtn_link$getElementAttribute("onclick")
nextBtn_link$getElementAttribute("onclick")
?RSelenium
